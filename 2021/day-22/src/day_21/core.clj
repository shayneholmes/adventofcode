(ns day-21.core)

; dir xmin xmax ymin ymax zmin zmax
(def steps [['on 0 44 -37 12 -13 31]
            ['on -35 19 -9 37 -14 39]
            ['on -34 20 -25 25 -38 7]
            ['on -29 19 -43 9 -18 32]
            ['on -34 20 -3 47 -45 6]
            ['on -46 2 -25 25 -1 47]
            ['on -41 4 -15 29 -14 36]
            ['on -49 2 -16 35 -15 33]
            ['on -45 -1 -9 45 -12 37]
            ['on -49 -4 -44 7 -41 11]
            ['off -45 -31 -9 3 -30 -16]
            ['on -38 14 -39 8 -42 10]
            ['off -19 -3 -21 -12 5 23]
            ['on -35 13 -34 16 -25 29]
            ['off -46 -28 -46 -36 -42 -31]
            ['on -19 28 -47 -1 -35 12]
            ['off 19 31 -22 -7 -30 -11]
            ['on -13 36 -9 41 -12 36]
            ['off -31 -20 -41 -32 -38 -26]
            ['on -31 14 -37 9 -45 4]
            ['on -73938 -62196 3443 9034 -32612 -17021]
            ['on 11497 31460 60006 90796 -22240 13121]
            ['on -84785 -70989 -24232 2943 1355 33300]
            ['on -62304 -41674 20801 37685 -72029 -48578]
            ['on 27091 35477 65585 68640 27496 41807]
            ['on -79925 -53933 15754 37674 -58855 -21255]
            ['on 53397 86735 -15458 603 16592 39240]
            ['on 6503 22046 -79095 -44818 39219 61123]
            ['on -14738 -9978 -32309 -9282 -84117 -56198]
            ['on -53303 -15260 36013 49687 42146 60625]
            ['on 28944 40115 27284 65156 34352 64375]
            ['on 12443 32462 -86320 -72957 -37302 -15930]
            ['on -57221 -28925 -68138 -58250 -2679 28821]
            ['on -39922 -8679 42239 55557 -62174 -52300]
            ['on 34028 54175 -46339 -32965 -63655 -39430]
            ['on -20575 -3002 27778 63544 45955 80786]
            ['on -26140 2740 -12717 8737 70012 86892]
            ['on -51968 -40374 59056 68995 -25615 -3003]
            ['on 11759 36752 -62045 -42506 49173 70791]
            ['on -52562 -41986 -68593 -51456 19710 45754]
            ['on -23912 -8022 38764 68555 54556 62383]
            ['on 4373 19117 16662 41406 73200 83056]
            ['on -26013 -833 -78827 -72828 9380 29364]
            ['on -63684 -51266 52138 71028 -15496 3842]
            ['on -33014 -10207 58579 64652 43614 53419]
            ['on 8066 34947 32818 55358 45952 64732]
            ['on -70581 -55165 -55271 -30839 25165 42692]
            ['on -23902 -12353 -90393 -77251 -19310 10171]
            ['on 32768 71484 -24096 -13199 42562 76124]
            ['on 46389 53215 42273 64944 7143 40135]
            ['on -35860 -13385 65032 80640 -35963 -19771]
            ['on -26770 -3 -67922 -51649 -67974 -37381]
            ['on -14241 11850 -72870 -61462 30807 44282]
            ['on -7280 21977 57242 68674 -64077 -40925]
            ['on -28425 -9059 8125 37879 -84646 -55484]
            ['on -53415 -38450 47254 61262 -27590 -3805]
            ['on 3361 28225 36236 58534 -65393 -46744]
            ['on 1062 32676 3058 17189 75597 82346]
            ['on -79427 -64097 23511 47998 -300 12658]
            ['on -70342 -40984 50005 66313 6310 30717]
            ['on 26527 50913 -38996 -25571 39959 60406]
            ['on 7914 28349 -21864 6473 62145 79705]
            ['on -62345 -39168 -32859 -16408 53937 76587]
            ['on -9442 1797 -70597 -47418 51948 60676]
            ['on 4510 25673 63310 85193 -23510 8871]
            ['on 35475 56176 -63029 -45748 -50077 -25512]
            ['on 24276 47633 65907 75455 -38311 -5365]
            ['on 10694 41920 -25618 -4817 -81536 -62494]
            ['on 23580 47161 39642 70350 -57206 -51762]
            ['on 34541 61418 -54870 -51639 -52737 -13574]
            ['on 26573 50838 49347 67491 -40181 -17993]
            ['on 19363 44106 49825 57796 -53962 -44680]
            ['on 48779 72304 -51520 -39288 -17798 -1599]
            ['on 14387 29768 66309 88343 -30725 1802]
            ['on -26898 -7113 34148 60236 -68569 -47817]
            ['on -1917 14866 73963 87022 19706 47877]
            ['on -21652 -7189 49895 66571 -61008 -49711]
            ['on -75172 -56722 -52100 -13789 19540 40904]
            ['on 56704 59968 40272 61077 13755 18186]
            ['on 55675 75691 20184 42076 -33878 -10387]
            ['on 3566 19806 7871 15345 -93592 -69728]
            ['on -51189 -30567 40275 60611 29996 53519]
            ['on 62519 80545 -36946 -14053 32578 43508]
            ['on 65634 89797 17584 33119 3906 27578]
            ['on 52683 79620 7888 28347 14649 40568]
            ['on -76157 -40131 -61400 -26121 29030 31914]
            ['on -19073 6442 74140 85840 -7965 13782]
            ['on -89406 -52575 -12811 5697 17754 37860]
            ['on -45654 -24432 -79743 -49772 -29644 -15792]
            ['on -5009 23177 -4302 22196 -91354 -68923]
            ['on -34584 -5708 29351 54855 -69343 -61885]
            ['on -34603 -18001 65897 84005 -35266 -27380]
            ['on -24889 -9794 -69048 -49632 36749 65195]
            ['on -22344 -11714 -45174 -35957 -81344 -52972]
            ['on -48631 -34450 412 18781 53477 70484]
            ['on -1799 34901 -73282 -59729 -54284 -28519]
            ['on -21485 -3584 16255 33723 -75895 -65963]
            ['on 10135 20049 69122 77086 -39260 -17702]
            ['on 12910 40582 30936 41952 48909 81279]
            ['on 56997 79483 29718 45554 8035 44163]
            ['on -52366 -41425 37823 58129 -37751 -32230]
            ['on 21004 51355 -44437 -30064 49722 68887]
            ['on -85331 -54480 -20771 -2512 22960 49404]
            ['on -70539 -52490 -26388 -8187 33552 56666]
            ['on 11851 24219 -88893 -70098 2688 15649]
            ['on -14791 5658 36510 61562 53931 59567]
            ['on 41468 52470 -68916 -57166 -21789 3326]
            ['on -59513 -32881 -61426 -44593 18648 48876]
            ['on -42142 -12784 -53336 -22224 62296 79634]
            ['on -33727 -13553 -76501 -56280 -36443 -4322]
            ['on -3920 24834 57885 75394 28969 43307]
            ['on -8530 -6505 -54496 -32426 58343 76441]
            ['on -78097 -61123 6293 27700 37893 60044]
            ['on -76734 -65330 -22416 0 -22994 3567]
            ['on -46396 -22834 63243 73190 -57144 -26646]
            ['on -43426 -12695 -62578 -42258 43321 63267]
            ['on 4677 27498 -89246 -66336 -18905 -3997]
            ['on 40910 49813 45217 81475 -3141 7830]
            ['on -74409 -40559 -2321 17962 -63223 -47045]
            ['on 2537 30799 60276 86279 -19505 -1824]
            ['on -21544 -1575 5568 13346 64967 91450]
            ['on -67372 -53668 1945 30432 -57195 -27814]
            ['on -18118 17642 -72676 -51134 20817 59152]
            ['on 53568 77802 -39415 -14908 7369 23590]
            ['on -22300 2878 -87012 -65923 -29751 -24137]
            ['on 18845 46745 28992 56855 -66504 -41258]
            ['on 38363 55824 15284 43241 -64158 -51010]
            ['on -23773 -2486 68041 73206 28552 46082]
            ['on 9380 34180 -28017 -6258 64054 90013]
            ['on 69826 81272 -33905 -27266 -12926 -6283]
            ['on 27658 38035 -48661 -18004 58898 71087]
            ['on 33965 58857 2566 27106 -72742 -58963]
            ['on -50492 -23728 -87688 -60261 -2227 7559]
            ['on 55258 75038 -32099 -10904 -50389 -28755]
            ['on -37244 -19587 56024 64469 43035 58612]
            ['on 30072 55168 -52337 -30911 -61347 -41809]
            ['on -54129 -34374 -62450 -36489 -42853 -19833]
            ['on 32436 57171 34091 48922 -57968 -34579]
            ['on -11825 7150 72739 86411 -36372 -8836]
            ['on -58911 -49067 2593 22976 -62295 -38715]
            ['on -29080 -10411 -86673 -74865 -7785 -448]
            ['on -73676 -57897 14203 53151 15251 38357]
            ['on 34035 65812 -17671 -2877 40496 77442]
            ['on -66126 -56271 26303 53565 29577 49089]
            ['on 39836 57094 50033 77838 -20826 3076]
            ['on -74133 -50777 4505 21474 44378 57660]
            ['on 66207 96154 -4888 28042 -34131 -12241]
            ['on 74285 90140 -17152 -2386 -5992 9738]
            ['on 31287 58348 -56430 -23132 -58113 -44360]
            ['on -53180 -48540 -70702 -44551 -9855 9719]
            ['on -53178 -34756 -74114 -58908 -11800 6319]
            ['on -78100 -71126 -49548 -31625 -7545 17149]
            ['on -21085 2430 35378 51904 65204 75349]
            ['on 21014 50514 -47953 -25311 59510 82024]
            ['on 6393 31326 -88473 -66480 21760 34337]
            ['on 72652 83357 -4889 16181 -30793 -19165]
            ['on -40791 -22636 33003 65858 -71154 -44429]
            ['on 11026 21498 -67290 -42567 54571 62386]
            ['on -95808 -67023 -25049 -13419 -7732 12529]
            ['on -88167 -72851 -33591 -19134 -24628 -3083]
            ['on 47382 65485 10408 39921 -68216 -48655]
            ['on -81776 -50333 42879 60779 -20533 5306]
            ['on -25769 -97 -79759 -61105 8085 14138]
            ['on -43919 -10690 -37052 -15583 -73654 -66674]
            ['on 525 12657 -98161 -64144 -1911 20619]
            ['on -43619 -22273 47737 67412 -44224 -22789]
            ['on -29099 -19470 -79037 -69942 -32317 -2647]
            ['on -66543 -29786 -33242 -16379 -76880 -43808]
            ['on 42404 65528 -78680 -49080 -6712 11522]
            ['on -25770 -19105 -94414 -69036 -3490 7773]
            ['on 68189 79601 -1131 8764 12347 29033]
            ['on -48917 -43919 -44293 -29674 -54200 -49960]
            ['on 9961 37871 39806 55016 -58429 -56252]
            ['on -32593 -5241 64202 78364 -51689 -40110]
            ['on -96479 -62354 -34214 578 -24244 -12864]
            ['on -59157 -36954 24993 32006 52057 59065]
            ['on -22462 630 -9833 1390 74108 95396]
            ['on -36548 -21908 70211 85387 11820 26815]
            ['on -89081 -63715 -2482 23117 -41800 -25935]
            ['on -72708 -63036 -42138 -28539 7486 22712]
            ['on 62713 80672 -54465 -43539 -22258 5327]
            ['on 19959 28851 -40197 -5309 70688 86899]
            ['on 7044 32272 -40188 -32289 57685 70198]
            ['on -43841 -17285 -18994 2223 -79996 -67556]
            ['on -60235 -46056 532 37445 -65044 -40449]
            ['on -36188 -15246 -66229 -41543 38918 65946]
            ['on -71692 -59176 -31059 -27660 26069 36557]
            ['on -24779 294 -65577 -51575 -52066 -38101]
            ['on -39935 -7955 -79862 -56020 -55069 -26152]
            ['on -92043 -77502 -6569 21479 -23927 -3008]
            ['on -73862 -47548 38520 55909 21972 38843]
            ['on 39462 74784 -5839 27894 50556 59146]
            ['on -51715 -28101 -70324 -45292 -45603 -39471]
            ['on 18845 48682 -51292 -41527 41912 67999]
            ['on -44382 -18806 27568 49266 -71666 -59690]
            ['on -97641 -74210 -28866 2806 -27057 -8152]
            ['on -11841 572 56132 82622 31034 50904]
            ['on -29495 -19457 -59051 -35103 58087 66872]
            ['on 811 24872 -87948 -75212 -12758 -4275]
            ['on -25888 -5807 37564 47001 -86767 -65224]
            ['on -75562 -55939 -44534 -39348 5807 42611]
            ['on 69936 97740 -11756 12520 9374 13991]
            ['on 51235 74232 46169 71391 -40400 -5253]
            ['on 44995 66871 -79985 -48991 -15787 -9827]
            ['on 26967 44788 -1751 10928 57633 82043]
            ['on -36460 -20618 -30511 2433 -87649 -67443]
            ['on -28199 -8118 36299 58314 60586 85798]
            ['on -66982 -63091 -19425 -13187 -62162 -29737]
            ['on 33418 63745 41581 66945 8366 11543]
            ['on -62696 -26186 -81384 -49937 2735 26366]
            ['on 27922 63045 -66435 -48207 -17876 -10340]
            ['on -42177 -18710 52693 55130 -57647 -47020]
            ['on 53857 72251 -51889 -32816 -1257 32096]
            ['on -75454 -59621 -56491 -45442 -28259 -4606]
            ['on -53275 -40273 34082 55816 -50144 -26852]
            ['on 3915 21179 -44233 -35392 64552 79384]
            ['on -15302 18484 49737 78962 34642 51471]
            ['on 8308 24843 -75205 -51493 -40488 -21696]
            ['on 15063 36959 57762 86629 -33356 -26277]
            ['on -18984 8905 -24420 5728 63544 84671]
            ['on 7979 27810 -42234 -24835 -84718 -54113]
            ['off -55430 -28648 -31879 -13453 -77100 -59398]
            ['off 70524 86136 27673 38206 -12175 237]
            ['off -63375 -59498 30918 65825 -16827 20111]
            ['off 29037 66605 -7920 18111 -74606 -54755]
            ['on 21848 56114 43499 67188 27107 53538]
            ['off -39426 -13005 63654 75939 -43663 -12483]
            ['off -16447 3523 -7518 24293 61149 89281]
            ['off 64979 94037 14716 41210 -12084 16973]
            ['off 49318 65422 -20704 -2975 -63925 -54297]
            ['on -5204 4585 62053 87351 8260 37526]
            ['off -10791 10028 2956 15927 74850 80540]
            ['off -53179 -23891 50184 70815 -48391 -32318]
            ['on 38180 63428 -62763 -55458 7225 24015]
            ['on 14808 40771 -13538 10038 -83824 -73922]
            ['off 51260 63929 -65194 -41886 -39094 -4267]
            ['on 8052 24075 -84451 -61988 -21344 -5407]
            ['on -56238 -35400 68435 83668 -4953 2752]
            ['off -14964 -997 -87721 -72883 -10901 10271]
            ['on 66724 94179 -15051 3145 -12436 24099]
            ['on -87281 -71205 1290 19702 -32036 -2263]
            ['off -25654 6803 -48994 -31519 -83726 -52780]
            ['off -226 25795 57068 85214 28454 49326]
            ['off -48098 -23356 45668 51941 -65212 -52581]
            ['on 18892 43729 -10415 8756 62449 91348]
            ['off -9718 13668 25930 42227 49237 83846]
            ['on 2623 24619 -80484 -56629 7207 44321]
            ['on -1727 26084 -35920 -3955 -85507 -68998]
            ['off 22044 50997 -28977 -11281 66838 76162]
            ['off -58300 -47709 -71414 -54365 -27328 -7994]
            ['on 46828 66206 22597 46096 -48013 -29549]
            ['on -40771 -3159 -88635 -63128 -20641 11952]
            ['on 44383 68616 48978 72474 12856 36009]
            ['on -76330 -53400 -73376 -37371 -3733 16491]
            ['on 61195 87029 26026 39149 -6969 16414]
            ['off -23460 -9984 3483 24901 73913 89619]
            ['off 55504 66010 5591 21247 29554 60174]
            ['on 49705 85963 24186 42287 -50469 -22882]
            ['on 53899 62111 47267 56256 -3187 11190]
            ['off 56950 93480 -48143 -21838 9086 13745]
            ['on -29809 3924 46636 69475 -58955 -36969]
            ['off 9629 24446 -77677 -57560 30789 57741]
            ['off -14942 5897 67283 85472 -1296 12055]
            ['off 17700 34268 -3515 5552 -82497 -70723]
            ['off -19934 16544 65957 82365 -15743 -4924]
            ['on -38964 -25098 36991 54382 50399 79334]
            ['off 47678 70611 -65138 -43640 3560 33286]
            ['on -30024 7675 31455 53480 49286 78924]
            ['on -5676 20571 -70400 -40522 -79115 -54097]
            ['on 31277 38456 -20206 10415 -79415 -66546]
            ['off -4825 -454 21757 48167 57643 71555]
            ['on -25274 -3312 37706 54577 61928 80815]
            ['off -45031 -38494 10596 33451 49580 80967]
            ['off 32155 42503 -70854 -64253 -13756 3446]
            ['off 51920 83623 17586 50069 5711 40695]
            ['off 54242 67587 -2774 33255 38162 55367]
            ['off 58752 74228 25212 49458 -22886 8331]
            ['off -33213 -13578 -3574 12371 72787 79131]
            ['off -74264 -49638 55266 71893 -3241 19860]
            ['off -22241 10364 -37471 -14850 -78546 -61413]
            ['off -64174 -36763 19282 35311 -69788 -49566]
            ['off -2803 15997 17766 40675 -78767 -71955]
            ['off 40261 65354 20764 50559 -67149 -41406]
            ['off -82743 -76717 -29399 -8404 2739 20577]
            ['on -54739 -23644 -69603 -40089 35004 49145]
            ['on -83575 -61028 -29392 -11560 -19862 -3281]
            ['on -18999 -12475 56155 70288 37945 64327]
            ['on 48085 49897 30060 57309 -48551 -33409]
            ['off 27808 45649 42800 65582 -45925 -25893]
            ['on -14897 3950 -14998 10321 77124 98698]
            ['off -65549 -37454 -20416 7402 56770 77874]
            ['on -65763 -42197 -69570 -56326 8301 29201]
            ['off -399 7443 32771 63820 48991 65952]
            ['off 43626 70187 -6567 16946 -59742 -38475]
            ['on -83169 -54440 -56857 -24179 -6644 5410]
            ['off 42226 71121 -6198 26342 -58213 -46379]
            ['off 12205 29034 20287 36141 52649 77560]
            ['on 66318 90635 -35137 -8345 12852 23741]
            ['on 1957 21389 64358 83601 -29068 1856]
            ['off 67520 75221 13646 30894 -43967 -23444]
            ['off -62326 -51049 -63293 -37679 -16600 -13718]
            ['off 4835 30649 -608 21604 -88031 -73100]
            ['on -32288 -22107 -88179 -61251 -2233 21686]
            ['on 6171 21315 49303 54686 -60551 -40314]
            ['off -1354 9007 -84707 -52460 37258 53411]
            ['off 47783 51134 -9048 4117 51895 76958]
            ['off 13732 43011 5389 31225 -81322 -58591]
            ['on -43997 -19680 -30093 -6650 -71398 -66316]
            ['on 6834 28045 -14021 -6015 74599 85802]
            ['on -13335 12281 25253 40207 67663 88964]
            ['off 26363 39175 -40596 -15324 54582 66608]
            ['on 51649 81960 -44500 -23493 -43960 -18397]
            ['on -77300 -60956 -50247 -21227 19298 42689]
            ['off -40193 -31978 -29483 -8493 -81551 -61670]
            ['off -78637 -52465 -21694 -15588 -40320 -33403]
            ['on -94894 -65030 -4414 31852 -36770 -16086]
            ['on -23048 -10727 -46610 -32408 -71889 -63925]
            ['on 8025 23913 54379 74236 35966 46850]
            ['on -31405 -9373 74011 90227 -24857 -1349]
            ['on 16439 41392 29071 46039 46700 71540]
            ['on 54847 76047 12817 16035 17667 39703]
            ['on 8048 37282 54304 78284 -42342 -16077]
            ['on 32121 52042 46329 53338 31893 44431]
            ['off 50489 83255 37221 56421 -11510 -4230]
            ['off 68756 85295 6470 8116 -23019 -22075]
            ['off -29769 7954 -84851 -65944 19478 39525]
            ['on 24569 28492 -84590 -53080 -35574 -4953]
            ['on 42349 74702 47739 64671 -8102 13959]
            ['on -32837 -12949 51948 75362 -28671 -14795]
            ['off -90750 -56359 -26811 -9897 -38290 663]
            ['off -27537 -12375 67271 84663 -17155 3171]
            ['off 39351 55525 -74164 -63645 -9550 6575]
            ['off 13478 37936 -25580 1624 -92576 -58628]
            ['on -13363 5625 49177 72483 27157 54290]
            ['on 71796 85714 -8953 12302 -23151 -4058]
            ['off -47605 -24282 -31411 -6804 -88415 -62427]
            ['off -70467 -41941 -1619 17809 44479 77491]
            ['off 54263 84125 -51828 -31213 -22717 149]
            ['on 16345 31347 -89521 -53954 -40641 -22114]
            ['off 48417 60696 -40182 -25979 -63662 -36051]
            ['off -54846 -26712 46087 82056 -40877 -13144]
            ['off -18587 16340 -82608 -65257 32057 43249]
            ['off 48595 55451 -2478 11032 42088 63031]
            ['on -80485 -52224 -48644 -34714 15921 36777]
            ['off -2439 5128 -89826 -73314 -25574 -1223]
            ['on 65787 71699 27282 57753 -5044 1627]
            ['off 56915 83691 -50778 -29731 -18515 -6455]
            ['off -19738 -10 77120 90060 3385 16939]
            ['on 30404 61456 -58802 -41103 -53143 -33172]
            ['on 38924 60529 -17769 -9540 35797 70659]
            ['off -48256 -16850 -28762 -17332 52408 87146]
            ['on 40785 54489 48021 82246 -14782 -3640]
            ['on -57485 -42936 44924 60213 -56900 -37632]
            ['on 23889 42647 -70706 -51225 33170 54796]
            ['on -61017 -43908 34409 59142 -54092 -32587]
            ['on -7501 11839 52251 69539 33509 66703]
            ['off 51023 76010 -32682 -4277 41542 66475]
            ['off -88587 -66353 -16557 -7157 31489 57110]
            ['on -61176 -40020 24011 29681 48581 67528]
            ['off -24216 7084 48839 69342 -68339 -45440]
            ['on -36500 -10001 -65989 -42396 -75644 -44001]
            ['off 15994 25097 33559 58625 53314 61396]
            ['on -53426 -32374 25747 42483 -72725 -53164]
            ['off -53445 -33211 35546 44583 -61133 -38708]
            ['off 50833 72417 23542 54128 -38895 -36210]
            ['on 9720 27443 76105 87466 -10519 4284]
            ['off -86798 -74426 769 5708 11295 23590]
            ['off -4921 2624 55240 76845 35060 47907]
            ['off 9701 26464 -94120 -69049 4307 24449]
            ['off 12870 51058 -78163 -61186 -44784 -28700]
            ['on -39740 -24117 -84396 -64005 5699 31498]
            ['off -9622 23063 -92455 -75057 -10460 -1601]
            ['on 25630 35530 48421 73435 -48169 -29333]
            ['off -39044 -14356 28511 37819 55159 66181]
            ['off -39519 -23640 -48365 -24136 -63775 -55242]
            ['off -15533 13075 -72226 -38939 54104 66411]
            ['off 15771 35269 -9255 17256 -79775 -74792]
            ['off -42745 -8225 -39239 -24094 60961 76111]
            ['on -18016 -7743 59524 94723 -2187 19315]
            ['on 73274 89281 -28554 1944 -15927 3832]
            ['off -55265 -29669 -75475 -58130 831 22836]
            ['on 21836 30294 64416 87049 -38909 -32813]
            ['off 5787 43254 29840 50131 46590 70685]
            ['off -28944 -2520 70858 92833 20014 23748]
            ['off -73123 -60640 28652 38688 -2341 21878]
            ['off -39114 -20962 31446 66163 49801 73696]
            ['on 24488 45320 58409 68248 11628 36696]
            ['off 11109 21650 -69846 -48058 -59763 -39328]
            ['off -53335 -23597 -59521 -30517 -52444 -36236]
            ['on -70103 -58246 -26631 -12027 -58448 -37062]
            ['off -36790 -14998 -31929 -24908 -91556 -71675]
            ['on 286 32167 -31987 -19155 60729 78642]
            ['on -30708 6946 -83845 -63192 31261 52361]
            ['on 932 20870 48688 54180 44158 61745]
            ['on -12103 13085 -77254 -74157 17397 34765]
            ['off -69501 -53250 16047 27462 -57585 -31239]
            ['off -25088 -9981 -24396 -7647 56899 79497]
            ['on 6535 27680 -74177 -53307 24672 33183]
            ['off -52784 -39875 44661 48780 -43402 -25803]
            ['on 5285 36452 -68391 -49097 -64091 -35600]
            ['on 16894 45821 60545 73341 -38181 -23081]
            ['off -15855 12376 -87828 -74328 -2207 24700]
            ['on -50903 -14504 -16767 -13145 -83963 -51110]
            ['on 67186 82547 -463 19992 -14953 13057]
            ['off -22852 -3925 74624 94686 -27060 -21704]
            ['off -54924 -34133 41730 51841 -53419 -33709]
            ['off -31758 1239 29064 50508 52146 73302]
            ['off 58797 80805 -36694 -25688 -6006 23217]
            ['on 58709 88754 -9540 19110 -40923 -31203]
            ['on -41224 -25003 -10094 18489 56298 80313]
            ['on 7324 19698 -80119 -62734 18521 27596]
            ['off -74531 -67692 8814 39573 -38789 -12043]
            ['on 14425 44843 -1624 18770 67485 81517]
            ['on -526 25273 -77438 -62606 15373 26867]
            ['off -58135 -33243 39832 47997 -61695 -41372]
            ['on -15036 12755 68334 86525 23148 47261]
            ['on -69748 -44442 -63761 -38877 24028 39375]
            ['off -76336 -54743 -54622 -22379 -12376 12905]
            ['on -17643 5250 -32698 -18664 66293 85378]
            ['on -43843 -7367 62737 81168 37020 49467]])

(defn volume [[_ xmin xmax ymin ymax zmin zmax]]
  (*
   (- (inc xmax) xmin)
   (- (inc ymax) ymin)
   (- (inc zmax) zmin)))

(volume ['on 0 10 0 10 0 10])

; dir xmin xmax ymin ymax zmin zmax
(defn intersect? [[_ xmin1 xmax1 ymin1 ymax1 zmin1 zmax1]
                  [_ xmin2 xmax2 ymin2 ymax2 zmin2 zmax2]]
  (not
   (or
    (< xmax1 xmin2) ; don't intersect in X dimension
    (< xmax2 xmin1)
    (< ymax1 ymin2) ; don't intersect in Y dimension
    (< ymax2 ymin1)
    (< zmax1 zmin2) ; don't intersect in Z dimension
    (< zmax2 zmin1))))

(intersect? ['on 0 0 0 0 0 0] ['on 0 0 0 0 0 0])

; overlaps? r1 r2 is true if r1 entirely contains r2
(defn overlaps? [[_ xmin1 xmax1 ymin1 ymax1 zmin1 zmax1]
                 [_ xmin2 xmax2 ymin2 ymax2 zmin2 zmax2]]
  (and
   (<= xmin1 xmin2)
   (>= xmax2 xmax1)
   (<= ymin1 ymin2) ; don't intersect in Y dimension
   (>= ymax2 ymax1)
   (<= zmin1 zmin2) ; don't intersect in Z dimension
   (>= zmax2 zmax1)))

(defn create-region [[state xmin xmax ymin ymax zmin zmax]]
  (if (or
       (> xmin xmax)
       (> ymin ymax)
       (> zmin zmax))
    nil
    [state xmin xmax ymin ymax zmin zmax]))

(defn glue [zone1 zone2]
  ; we can glue two zones into a single cuboid if they are the same in two dimensions, and consecutive in the third
  (let [[state1 xmin1 xmax1 ymin1 ymax1 zmin1 zmax1] zone1
        [state2 xmin2 xmax2 ymin2 ymax2 zmin2 zmax2] zone2]
    (cond
      (and (= xmin1 xmin2) (= xmax1 xmax2) (= ymin1 ymin2) (= ymax1 ymax2) (or (= (inc zmax1) zmin2) (= (inc zmax2) zmin1)))
      (create-region [state1 xmin1 xmax1 ymin1 ymax1 (min zmin1 zmin2) (max zmax1 zmax2)])
      (and (= xmin1 xmin2) (= xmax1 xmax2) (= zmin1 zmin2) (= zmax1 zmax2) (or (= (inc ymax1) ymin2) (= (inc ymax2) ymin1)))
      (create-region [state1 xmin1 xmax1 (min ymin1 ymin2) (max ymax1 ymax2) zmin1 zmax1])
      (and (= zmin1 zmin2) (= zmax1 zmax2) (= ymin1 ymin2) (= ymax1 ymax2) (or (= (inc xmax1) xmin2) (= (inc xmax2) xmin1)))
      (create-region [state1 (min xmin1 xmin2) (max xmax1 xmax2) ymin1 ymax1 zmin1 zmax1]))))

(glue ['on 1 1 1 1 1 1] ['on 1 1 1 1 2 3]) ; z
(glue ['on 1 1 1 1 2 3] ['on 1 1 1 1 1 1]) ; z
(glue ['off 1 1 1 1 2 3] ['on 1 1 1 1 1 1]) ; z (state mismatch)
(glue ['on 1 1 1 1 1 1] ['on 1 1 2 3 1 1]) ; y
(glue ['on 1 1 1 1 1 1] ['on 2 3 1 1 1 1]) ; x
(glue ['on 3 3 1 1 1 1] ['on 2 2 1 1 1 1]) ; x
(glue ['on 1 1 1 1 1 1] ['on 3 3 1 1 1 1]) ; x (gap)

(defn add-with-glue
  ([] [])
  ([nu] [nu])
  ([zones nu] (add-with-glue zones nu []))
  ([zones nu glued-set]
   (if (empty? zones)
     (conj glued-set nu)
     (let [[first & rest] zones
           glued (glue nu first)]
       (if (nil? glued)
         (recur rest nu (conj glued-set first))
         ; glueable pair found, throw it in
         (concat glued-set [glued] rest))))))
         ; glueable pair found: retry adding all of them with glue now
         ; (reduce add-with-glue [] (concat glued-set [glued] rest)))))))

(defn with-x [x] ['on x x 1 1 1 1])
(glue (with-x 3) (with-x 2))

(add-with-glue)
(add-with-glue (with-x 3))

(defn combine-with-glue [& zones]
  (reduce add-with-glue [] zones))

(combine-with-glue (with-x 1))
(combine-with-glue (with-x 1) (with-x 2) (with-x 3))
(combine-with-glue (with-x 1) (with-x 3) (with-x 2))
(combine-with-glue ['on 1 1 1 1 1 1])
(combine-with-glue ['on 1 1 1 1 1 1] ['on 1 1 1 1 2 2])

(combine-with-glue ['on 1 1 1 1 1 1] ['on 1 1 1 1 2 2] ['on 1 1 1 1 3 3])

; computes the difference between two cuboids zone1 and zone2. The result is a collection of cuboids that describe the difference.
; any cube in zone2 will not be in the resulting zones
(defn difference [zone1 zone2]
  (if (not (intersect? zone1 zone2))
    zone1 ; this is the easy case: no intersection, so no need to divide things
    (let [[state1 xmin1 xmax1 ymin1 ymax1 zmin1 zmax1] zone1
          [state2 xmin2 xmax2 ymin2 ymax2 zmin2 zmax2] zone2
          all-regions ; there are 27 potential different zones, and we'll explore all of them.
          ; maybe we'll refactor them later.
          ; we'll denote the 27 different positions by {l,b,g} (less, between, greater) for each of {x,y,z}.
          ; the dividing lines will be those specified by zone2, though zone1 will limit any of the resulting regions.
          (filter
           (fn [x] (not (nil? x)))
           (for [[xopt xmin xmax] [[0 xmin1 (min xmax1 (dec xmin2))]
                                   [1 (max xmin1 xmin2) (min xmax1 xmax2)]
                                   [2 (max xmin1 (inc xmax2)) xmax1]]
                 [yopt ymin ymax] [[0 ymin1 (min ymax1 (dec ymin2))]
                                   [1 (max ymin1 ymin2) (min ymax1 ymax2)]
                                   [2 (max ymin1 (inc ymax2)) ymax1]]
                 [zopt zmin zmax] [[0 zmin1 (min zmax1 (dec zmin2))]
                                   [1 (max zmin1 zmin2) (min zmax1 zmax2)]
                                   [2 (max zmin1 (inc zmax2)) zmax1]]]

             (if (and (= xopt 1) (= yopt 1) (= zopt 1))
               nil ; middle region belongs to zone 2
               (create-region
                [state1
                 xmin xmax
                 ymin ymax
                 zmin zmax]))))
          glued-regions ; "stitch" together neighbors that can be represented as a single cuboid. O(n²) but always for small n, so this probably pays off in the end.
          (apply combine-with-glue all-regions)]
      glued-regions)))

(difference ['on 0 3 0 3 0 3] ['on 1 1 1 1 1 1]) ; contained
(difference ['on 1 1 1 1 1 1] ['on 0 3 0 3 0 3]) ; contained
(difference ['on 0 3 0 3 0 3] ['on -1 4 -1 4 1 1]) ; slice into two
(difference ['on 0 3 0 3 0 3] ['on 1 2 1 2 -1 4]) ; cut a donut
(difference ['on 0 3 0 3 0 3] ['on 1 2 1 2 1 2]) ; contained hole

(defn union
  ; strategy: break each item to insert down each time there's a conflict, which may make the list longer but gets us closer to completion
  ([to-insert] (union [] to-insert))
  ([existing to-insert] (union existing to-insert existing))
  ([existing to-insert still-to-check]
   (cond
     (empty? to-insert) existing ; no items to insert
     :else
     (let [[candidate & rest-to-insert] to-insert
           [first-to-check & rest-to-check] still-to-check]
       (if (empty? still-to-check)
         (union (add-with-glue existing (first to-insert)) rest-to-insert) ; this chunk has passed the gauntlet
         (if (not (intersect? candidate first-to-check))
           (recur existing to-insert rest-to-check) ; no conflict so far, go ahead and check the next
           (let [pieces (difference candidate first-to-check) ; conflict, compute the difference
                 new-to-insert (concat pieces rest-to-insert) ; put new pieces in the front, they're more likely to fit
                 ]
             (recur
              existing
              new-to-insert
              existing ; reset the list of things to check
              ))))))))

(union [(with-x 1) (with-x 3) (with-x 1) (with-x 2)])

(defn difference-between-sets
  ; follow the pattern in union.
  ; a is already a disjoint set, so we just pretend we're going to union a and b
  ([a b] (difference-between-sets a b b []))
  ([a b still-to-check cleared]
   (if (empty? a) cleared ; done!
       (let [[a-first & a-rest] a
             [first-to-check & rest-to-check] still-to-check]
         (if (empty? still-to-check)
           (recur a-rest b b (conj cleared a-first)); this chunk has passed the gauntlet; reset the to-check list and try again
           (if (not (intersect? a-first first-to-check))
             (recur a b rest-to-check cleared) ; no conflict so far, go ahead and check the next
             (let [pieces (difference a-first first-to-check) ; conflict, compute the difference
                   new-a (concat pieces a-rest) ; put new pieces in the front, they're more likely to fit
                   ]
               (recur
                new-a
                b
                b ; reset the list of things to check
                cleared))))))))

(difference-between-sets (union [(with-x 1) ['on 0 10 0 10 0 10] (with-x 3)]) [(with-x 1)])


; With this built up, start evaluating rules

; There are 24 orders this could take, but some are invalid since lo1 <= hi1, lo2 <= hi2
; lo1 < hi1 < lo2 < hi2 ; disjoint               ; lo1 -> hi1    ; lo2 XX hi1 ; hi2+1 XX hi1
; lo1 < lo2 < hi1 < hi2 ; overlapping, but 1 < 2 ; lo1 -> lo2-1  ; lo2 -> hi1 ; hi2+1 XX hi1
; lo1 < lo2 < hi2 < hi1 ; 1 contains 2           ; lo1 -> lo2-1  ; lo2 -> hi2 ; hi2+1 -> hi1
; lo2 < lo1 < hi2 < hi1 ; overlapping, but 2 < 1 ; lo1 XX lo2-1  ; lo1 -> hi2 ; hi2+1 -> hi1
; lo2 < lo1 < hi1 < hi2 ; 2 contains 1           ; lo1 XX lo2-1  ; lo1 -> hi1 ; hi2+1 XX hi1
; lo2 < hi2 < lo1 < hi1 ; disjoint               ; lo1 XX lo2-1  ; lo1 XX hi2 ; lo1   -> hi1

(filterv (fn [x] (intersect? ['on -50 50 -50 50 -50 50] x)) steps)

(defn in? [[_ xmin xmax ymin ymax zmin zmax]
           [x y z]]
  (and
   (>= x xmin)
   (<= x xmax)
   (>= y ymin)
   (<= y ymax)
   (>= z zmin)
   (<= z zmax)))

(in?  (get steps 1) [0 0 0])
(intersect? (get steps 1) ['on 0 0 0 0 0 0])

(defn is-on [[state xmin xmax ymin ymax zmin zmax]] (= state 'on))

; (defn latest-state [point]
;   (let
;    [rev-steps (rseq steps)]
;     (loop [[step & rest] rev-steps]
;       (if (empty? step) false
;           (if (in? step point)
;             (is-on step)
;             (recur rest))))))

; (latest-state [-21 -40 -27])

; (range  -50 51)

; (let
;  [results
;   (for [x (range -50 51)
;         y (range -50 51)
;         z (range -50 51)]
;     (latest-state [x y z]))
;   filtered (filter true? (flatten results))]
;   (count filtered))

; (clojure.string/join
;  "\n"
;  (map-indexed
;   (fn [i si]
;     (clojure.string/join
;      " "
;      (filter
;       (fn [x] (not (nil? x)))
;       (map-indexed
;        (fn [j sj]
;          (if (intersect? si sj) j nil))
;        steps))))
;   steps))

(defn how-many-on [steps]
  ; Go through the steps backward. The last step "wins" all of its territory, so all of those boxes are on.
  ; For subsequent steps, they "win" everything not taken by a later (higher-priority) step.
  ; For steps that are 'off', they don't contribute to the total count of 'on' boxes, but they should be consulted later to see if they occlude part of an 'on' zone.
  (let
   [rev-steps (rseq steps)]
    (loop [[step & rest] rev-steps
           already-taken []
           count-of-cubes-on 0]
      (println
        "steps left"
        (count rest)
        "regions counted"
        (count already-taken)
        "cubes on"
        count-of-cubes-on
        )
      (if (empty? step) count-of-cubes-on ; done!
          (let [on? (is-on step)
                new-region (difference-between-sets [step] already-taken)
                new-taken (union already-taken new-region)
                new-cubes-on (if on? (apply + (map volume new-region)) 0)]
            (recur rest new-taken (+ count-of-cubes-on new-cubes-on)))))))

(how-many-on [['on 1 1 1 1 1 3] ['off 1 2 1 2 1 2] ['on 1 1 1 1 1 1]]) ; should be 2
(how-many-on steps)
